require(devtools); require(roxygen2)
document()
build()
install()
require(ritwals)
head(WALS_contributions)
head(WALS_features)
nrow(WALS_features)
head(WALS_languages)
nrow(WALS_languages)
ncol(WALS_languages)
head(WALS)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
head(WALS)
ls()
head(WALS)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
?WALS
head(WALS)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
head(WALS)
source("data-raw/preprocess.R")
q()
source("data-raw/preprocess.R")
erkki <- make_WALS()
head(erkki)
nrow(erkki)
length(unique(erkki$case_ID))
length(unique(erkki$combined_ID))
length(unique(erkki$code_ID))
erkki[erkki$language_ID=="fin" & erkki$feature_ID=="9A", ]
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
ls()
rm(list=ls())
q()
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
require(devtools); require(roxygen2)
document(); build(); install(); require(ritwals)
ncol(WALS)
nrow(WALS)
head(WALS)
language_metadata("ger")
language_metadata("rus")
24 < 2444
great_circle_distance("fre", "ger") + great_circle_distance("ger", "rus")
great_circle_distance("fre", "rus")
document(); build(); install(); require(ritwals)
q()
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
require(devtools);require(roxygen2)
document(); build(); install(); require(ritwals)
q()
require(ritwals)
rm(great_circle_distance)
require(ritwals)
erkki <- WALS[WALS$in_WALS100, ]
erkki <- WALS[WALS$in_WALS100, ]
erkki <- WALS[WALS$in_WALS100, ]
system.time(erkki <- WALS[WALS$in_WALS100, ])
system.time(erkki <- WALS[WALS$in_WALS100, ])
system.time(erkki <- WALS[WALS$in_WALS200, ])
nrow(erkki)
system.time(erkki <- WALS[WALS$in_WALS100, ])
nrow(erkki)
system.time(erkki <- WALS[WALS$in_WALS_100, ])
nrow(erkki)
system.time(erkki <- WALS[WALS$in_WALS_200, ])
nrow(erkki)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
require(devtools); require(roxygen2)
document(); build(); install(); require(ritwals)
document(); build(); install(); require(ritwals)
document(); build(); install(); require(ritwals)
document(); build(); install(); require(ritwals)
check()
head(WALS)
country_codes("fre")
head(WALS_languages)
WALS_languages[WALS_languages$language_ID %in% c("fre"), ]
WALS_languages[WALS_languages$language_ID %in% c("fre"), ]$countrycodes
strsplit(WALS_languages[WALS_languages$language_ID %in% c("fre"), ]$countrycodes, "\\s")
strsplit(WALS_languages[WALS_languages$language_ID %in% c("fre"), ]$countrycodes, "")
strsplit(WALS_languages[WALS_languages$language_ID %in% c("fre"), ]$countrycodes)
strsplit(as.character(WALS_languages[WALS_languages$language_ID %in% c("fre"), ]$countrycodes), split="\\s")
strsplit(as.character(WALS_languages[WALS_languages$language_ID %in% c("ger"), ]$countrycodes), split="\\s")
strsplit(as.character(WALS_languages[WALS_languages$language_ID %in% c("ger", "fre"), ]$countrycodes), split="\\s")
unlist(strsplit(as.character(WALS_languages[WALS_languages$language_ID %in% c("ger", "fre"), ]$countrycodes), split="\\s"))
as.data.frame(strsplit(as.character(WALS_languages[WALS_languages$language_ID %in% c("ger", "fre"), ]$countrycodes), split="\\s"))
head(WALS)
head(WALS_features(
)
)
head(WALS_features)
head(WALS_languages)
head(WALS_languages)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
check()
document(); build(); install(); require(ritwals)
great_circle_distance("fre", "ger")
head(WALS)
erkki <- sample_WALS_100
erkki <- sample_WALS_100()
erkki
erkki <- sample_random(N=30)
erkki
great_circle_distance("fre", "ger")
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
great_circle_distance("fre", "ger")
q()
require(devtools); require(roxygen2)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
great_circle_distance("fre", "ger")
nearest_geo_neighbours("fin", k=10)
great_circle_distance(c("fre", "fin"), "ger")
great_circle_distance(c("fre", "fin"), c("ger", "fin"))
great_circle_distance(c("fre", "fin"), c("ger", "fin", "pol"))
nearest_geo_neighbours("fin", k=10)
check()
document(); build(); install(); require(ritwals)
check()
document(); build(); install(); require(ritwals); check()
document(); build(); install(); require(ritwals); check()
?iconv
WALS_languages$genus
unique(WALS_languages$genus)
unique(WALS_languages$family)
document(); build(); install(); require(ritwals); check()
contingency_table(c("13A", "18A"))
contingency_table(c("13A", "9A"))
class(WALS_languages$latitude)
class(WALS_languages$genus)
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals
)
class(WALS$family)
class(WALS$value)
class(WALS$value_ID)
class(WALS$value)
WALS$value
?read.csv
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals
)
class(WALS_languages$family)
q()
require(ritwals)
class(WALS_languages$family)
class(WALS_languages$language)
class(WALS_languages$language_ID9
)
head(WALS_languages)
class(WALS_languages$latitude)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
require(devtools); require(roxygen2)
document(); build(); install(); require(ritwals)
class(WALS$value)
class(WALS$value_ID)
class(WALS$family)
head(WALS)
class(WALS$combined_ID)
class(WALS$feature_ID)
head(WALS_languages)
q()
require(ritwals)
class(WALS$family)
class(WALS$langauge_ID)
class(WALS$language_ID)
class(WALS$value)
class(WALS$value_ID)
class(WALS$combined_ID)
source("data-raw/preprocess.R")
document(); build(); install(); require(ritwals)
require(devtools); require(roxygen2)
document(); build(); install(); require(ritwals)
class(WALS$combined_ID)
class(WALS$value)
q()
require(ritwals)
class(WALS$value)
contingency_table(c("13A", "18A"))
contingency_table(c("13A", "1A"))
contingency_table(c("13A", "1A"), names=FALSE)
contingency_table(c("13A", "1A"), absolute=TRUE)
contingency_table(c("13A", "1A"), absolute=FALSE)
document(); build(); install(); require(ritwals)
require(devtools); require(roxygen2)
document(); build(); install(); require(ritwals)
contingency_table(c("13A", "1A"), 
)
contingency_table(c("13A", "1A"))
contingency_table(c("13A", "18A"))
contingency_table(c("13A", "28A"))
contingency_table(c("13A", "83A"))
contingency_table(c("83A", "13A"))
country_codes("fin")
country_codes(c("fin", "swe"))
feature_metadata("1A")
class(feature_metadata("1A")$value_ID)
class(feature_metadata("1A")$value)
class(feature_metadata("1A")$feature_ID)
class(feature_metadata("1A")$code_ID)
class(feature_metadata("1A")$feature)
contingency_table(c("13A", "83A"))
contingency_table(c("13A", "83A"), absolute=FALSE)
contingency_table(c("13A", "83A"), absolute=FALSE, names=FALSE)
contingency_table(c("13A", "1A"), absolute=FALSE, names=FALSE)
contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE)
contingency_table(c("13A", "1A"), absolute=TRUE, names=TRUE)
contingency_table(c("13A", "1A"), absolute=TRUE, names=FALSE)
ids <- c("13A", "1A")
parse(text=paste0("subset(intersection, feature_ID==\"", ids, "\")$value"))
filter_WALS(feature_ID=="13A")
parse(text=paste0("subset(intersection, feature_ID==\"", ids, "\")$value"))
document(); build(); install(); require(ritwals)
contingency_table(c("13A", "1A"), absolute=TRUE, names=FALSE)
contingency_table(c("13A", "1A"), absolute=TRUE, names=TRUE)
document(); build(); install(); require(ritwals)
contingency_table(c("13A", "1A"), absolute=TRUE, names=FALSE)
contingency_table(c("13A", "1A"), absolute=TRUE, names=TRUE)
document(); build(); install(); require(ritwals)
document(); build(); install(); require(ritwals)
contingency_table(c("13A", "1A"), absolute=TRUE, names=TRUE)
document(); build(); install(); require(ritwals)
contingency_table(c("13A", "1A"), absolute=TRUE, names=TRUE)
document(); build(); install(); require(ritwals)
contingency_table(c("13A", "1A"), absolute=TRUE, names=TRUE)
contingency_table(c("13A", "1A"), absolute=TRUE, names=FALSE)
contingency_table(c("13A", "1A"), absolute=FALSE, names=FALSE)
contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE)
contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE)[2,2]
contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE)[2,3]
names(contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE))
row.names(contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE))
col.names(contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE))
colnames(contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE))
rownames(contingency_table(c("13A", "1A"), absolute=FALSE, names=TRUE))
filter_WALS(language_ID=="fin")
head(filter_WALS(language_ID=="fin")(
)
)
head(filter_WALS(language_ID=="fin"))
head(filter_WALS(language_ID=="fin") & feature_ID==c("101A", "102A"))
head(filter_WALS(language_ID=="fin" & feature_ID%in%c("101A", "102A"))
)
head(filter_WALS(language_ID=="fin" & feature_ID%in%c("101A", "102A")))
filter_WALS(language_ID=="fin" & feature_ID%in%c("101A", "102A"))
filter_WALS(language_ID=="fin" & feature_ID%in%c("101A", "102A"))
filter_WALS(contributors=="Anna Siewierska")
great_circle_distance("fin", "swe")
great_circle_distance("fin", "est")
great_circle_distance("fin", "ger")
great_circle_distance("fin", "swa")
language_metadata("swa")
intersect_features(c("23A", "32A"))
length(unique(intersect_features(c("23A", "32A"))$language_ID))
length(unique(intersect_features(c("23A", "32A", "1A"))$language_ID))
length(unique(intersect_features(c("23A", "32A", "1A", "2A"))$language_ID))
length(unique(intersect_features(c("23A", "32A", "1A", "2A", "25A"))$language_ID))
length(unique(intersect_features(c("23A", "32A", "1A", "2A", "35A"))$language_ID))
intersect_features(unique(WALS$feature_ID))
head(WALS_languages)
head(WALS)
nearest_geo_neighbours("fin", k=15)
nearest_geo_neighbours_discoidal("fin", radius=1000)
sample_WALS_200
sample_WALS_200()
length(unique(sample_WALS_200()$language))
length(unique(sample_WALS_100()$language))
length(unique(sample_WALS_200()$language))
document(); build(); install(); require(ritwals)
length(unique(sample_WALS_200()$language))
unique(sample_WALS_200()$language)
unique(WALS$family)
iconv(unique(WALS$family), from="UTF-8", to="latin1")
source("data-raw/preprocess.R")
q()
document()
require(devtools); require(roxygen2)
document()
build()
install();
check()
unique(WALS_languages$family)
sort(unique(WALS_languages$family))
sort(unique(WALS_languages$genus))
sort(unique(WALS_languages$language))
source("data-raw/preprocess.R")
q()
require(devtools); require(roxygen2)
document()
build()
install()
require(ritwals)
check()
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
q()
require(devtools); require(roxygen2)
document()
build()
check()
q()
source("data-raw/preprocess.R")
require(devtools); require(roxygen2)
document()
build()
q()
unique(WALS$macroarea)
require(ritwals)
unique(WALS$macroarea)
q()
source("data-raw/preprocess.R")
require(devtools); require(roxygen2)
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document()
build()
?use_github
?use_testthat
ls(
)
check()
install()
document()
build()
check()
install()
packageVersion("ritwals")
install_github("hkauhanen/ritwals")
?install_github
?install_github
install_github("hkauhanen/ritwals")
q()
require(devtools); require(roxygen2)
document()
build()
install()
require(devtools); require(roxygen2)
document()
build()
check()
check()
check()
install()
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
q()
require(devtools); require(roxygen2)
document(); build(); check(); install()
levels(WALS$language)
WALS$language
class(WALS$language)
source("data-raw/preprocess.R")
document(); build(); check(); install()
source("data-raw/preprocess.R")
document(); build(); check(); install()
source("data-raw/preprocess.R")
source("data-raw/preprocess.R")
document(); build(); check(); install()
source("data-raw/preprocess.R")
document(); build(); check(); install()
head(WALS)
head(WALS_languages)
q()
require(ritwals
)
head(WALS)
class(WALS$combined_ID)
class(WALS$feature_ID)
class(WALS$feature)
class(WALS$language)
class(WALS$macroarea)
class(WALS$in_WALS_100)
16/42
head(WALS)
class(WALS$combined_ID)
?read.csv
"1"==1
"1"==2
"2"==2
head(WALS_languages)
class(WALS_languages$language_ID)
names(WALS_languages)
source("data-raw/preprocess.R")
head(WALS_languages)
class(WALS_languages$language_ID)
class(WALS_languages$iso_code)
class(WALS_languages$glottocode)
class(WALS_languages$language)
class(WALS_languages$family)
class(WALS_languages$genus)
class(WALS_languages$macroarea)
class(WALS_languages$countrycodes)
class(WALS_languages$latitude)
class(WALS_languages$longitude)
class(WALS_languages$in_WALS_100)
class(WALS_languages$in_WALS_200)
source("data-raw/preprocess.R")
class(WALS_languages$in_WALS_200)
class(WALS_languages$in_WALS_100)
head(WALS_features)
class(WALS_features$feature_ID)
class(WALS_features$value_ID)
source("data-raw/preprocess.R")
head(WALS_features)
class(WALS_features$feature_ID)
class(WALS_features$feature)
class(WALS_features$value_DI)
class(WALS_features$value_ID)
class(WALS_features$value)
class(WALS_features$code_ID)
head(WALS)
class(WALS$combined_ID)
class(WALS$feature_ID)
class(WALS$feature)
class(WALS$value_ID)
class(WALS$value)
class(WALS$code_ID)
class(WALS$language_ID)
source("data-raw/preprocess.R")
class(WALS[, names(WALS)])
class(WALS[, 1])
class(WALS[, 2])
class(WALS[, 2:10])
for (i in 1:ncol(WALS)) class(WALS[,i])
for (i in 1:ncol(WALS)) print(class(WALS[,i]))
source("data-raw/preprocess.R")
document()
require(devtools)
require(roxygen2)
document()
build()
check()
install()
ls()
head(WALS)
class(WALS$countrycodes)
class(WALS$macroarea)
class(WALS$latitude)
q()
require(ritwals)
class(WALS$language)
class(WALS$macroarea)
class(WALS$latitude)
source("data-raw/preprocess.R")
document(); build(); check(); install()
require(devtools)
require(roxygen2)
document(); build(); check(); install()
source("data-raw/preprocess.R")
document(); build(); check(); install()
source("data-raw/preprocess.R")
document(); build(); check(); install()
document(); build(); check(); install()
document(); build(); check(); install()
document(); build(); check(); install()
q()
